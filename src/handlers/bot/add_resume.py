# src/handlers/bot/add_resume.py
import re

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from src.config import config
from src.keyboards.reply_kb import get_keyboard
from src.keyboards.resume_kb import get_resume_actions_inline_kb
from src.models import Resume, User
from src.services.hh_client import hh_client
from src.services.resume import extract_keywords
from src.states.user_states import AddResumeStates

router = Router()


@router.message(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ")
async def add_resume_start(message: Message, state: FSMContext):
    if message.from_user.id in config.bot.admin_ids:
        is_user_admin = True
    else:
        is_user_admin = False
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ hh.ru –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                         "https://hh.ru/resume/–í–ê–®_ID",
                         reply_markup=get_keyboard(is_user_admin)
                         )
    await state.set_state(AddResumeStates.waiting_for_resume_url)


@router.message(AddResumeStates.waiting_for_resume_url)
async def resume_url_received(message: Message, state: FSMContext):
    if message.from_user.id in config.bot.admin_ids:
        is_user_admin = True
    else:
        is_user_admin = False

    resume_url = message.text.strip()
    match = re.match(r"^https://hh\.ru/resume/([a-fA-F0-9]{38})$", resume_url)
    if not match:
        await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ —Å hh.ru –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                             "https://hh.ru/resume/–í–ê–®_ID",
                             reply_markup=get_keyboard(is_user_admin)
                             )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º state, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º!
        return

    resume_id = match.group(1)

    try:
        resume_json = await hh_client.get_resume(resume_id)
    except Exception as e:
        await message.answer(f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}\n\n"
                             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–µ–∑—é–º–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.",
                             reply_markup=get_keyboard(is_user_admin))
        return

    positive_keywords = extract_keywords(resume_json["title"])

    user = await User.get_or_none(id=message.from_user.id)
    resume, created = await Resume.get_or_create(
        id=resume_id,
        defaults={
            "user": user,
            "resume_json": resume_json,
            "positive_keywords": positive_keywords
        }
    )
    if not created:
        # –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ —É–∂–µ –±—ã–ª–æ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        resume.user = user
        resume.resume_json = resume_json
        resume.positive_keywords = positive_keywords
        await resume.save()
    # –ó–¥–µ—Å—å –¥–∞–ª—å—à–µ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º resume_id, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —é–∑–µ—Ä—É –∏ —Ç.–¥.)
    await message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! ID —Ä–µ–∑—é–º–µ: <code>{resume_id}</code>\n\n"
        f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(positive_keywords)}",
        reply_markup=get_resume_actions_inline_kb(resume_id)
    )
    await state.clear()


@router.callback_query(F.data.startswith("add_positive:"))
async def handle_add_positive_keywords_callback(call: CallbackQuery, state: FSMContext):
    resume_id = call.data.split(":", 1)[1]
    await state.update_data(resume_id=resume_id)  # –°–æ—Ö—Ä–∞–Ω–∏–º resume_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await call.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–Ω–∞–≤—ã–∫–æ–≤), "
        "—Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>Python Django FastAPI</code>\n"
        "–∏–ª–∏\n"
        "<code>Python, Django, FastAPI</code>"
    )
    await state.set_state(AddResumeStates.waiting_for_positive_keywords)
    await call.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏


@router.message(AddResumeStates.waiting_for_positive_keywords)
async def receive_positive_keywords(message: Message, state: FSMContext):
    text = message.text.strip()
    # –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–∞: —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ‚Äî –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç–∞—è, –≤–æ–∑–º–æ–∂–Ω—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ
    keywords = [w.strip() for w in re.split(r"[,\s]+", text) if w.strip()]

    if not keywords:
        await message.answer("–°–ø–∏—Å–æ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –∑–∞–ø—è—Ç—ã–µ.")
        return

    # –î–æ—Å—Ç–∞–µ–º resume_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    resume_id = data.get("resume_id")

    resume = await Resume.get_or_none(id=resume_id)
    if not resume:
        await message.answer("–û—à–∏–±–∫–∞: —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    resume.positive_keywords = keywords
    await resume.save()

    await message.answer(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n<code>{', '.join(keywords)}</code>")
    await state.clear()


@router.callback_query(F.data.startswith("add_negative:"))
async def handle_add_negative_keywords_callback(call: CallbackQuery, state: FSMContext):
    resume_id = call.data.split(":", 1)[1]
    await state.update_data(resume_id=resume_id)
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏).\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1C PHP —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥</code>\n"
        "–∏–ª–∏\n"
        "<code>1C, PHP, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥</code>"
    )
    await state.set_state(AddResumeStates.waiting_for_negative_keywords)
    await call.answer()


@router.message(AddResumeStates.waiting_for_negative_keywords)
async def receive_negative_keywords(message: Message, state: FSMContext):
    text = message.text.strip()
    keywords = [w.strip() for w in re.split(r"[,\s]+", text) if w.strip()]

    if not keywords:
        await message.answer("–°–ø–∏—Å–æ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –∑–∞–ø—è—Ç—ã–µ.")
        return

    data = await state.get_data()
    resume_id = data.get("resume_id")

    resume = await Resume.get_or_none(id=resume_id)
    if not resume:
        await message.answer("–û—à–∏–±–∫–∞: —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    resume.negative_keywords = keywords
    await resume.save()

    await message.answer(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n<code>{', '.join(keywords)}</code>")
    await state.clear()


@router.callback_query(F.data.startswith("start_apply"))
async def handle_start_apply_callback(call: CallbackQuery, state: FSMContext):
    resume_id = call.data.split(":", 1)[1]

    resume = await Resume.get_or_none(id=resume_id)
    if not resume:
        await call.message.answer("–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        await call.answer()
        return

    resume.status = "active"
    await resume.save()

    await call.message.answer(
        f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è —Ä–µ–∑—é–º–µ <code>{resume_id}</code>.\n"
    )
    await state.clear()
    await call.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏


@router.message(lambda m: m.text == "–ú–æ–∏ —Ä–µ–∑—é–º–µ")
async def my_resumes_handler(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    resumes = await Resume.filter(user_id=user_id).all()

    if not resumes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ.\n\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Ä–µ–∑—é–º–µ.")
        return

    response_parts = ["üìÑ **–í–∞—à–∏ —Ä–µ–∑—é–º–µ:**\n"]

    for resume in resumes:
        status_emoji = "‚úÖ" if resume.status == "active" else "‚è∏"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ resume_json
        title = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if resume.resume_json and isinstance(resume.resume_json, dict):
            title = resume.resume_json.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        response_parts.append(
            f"{status_emoji} **{title}**\n"
            f"ID: `{resume.id}`\n"
            f"–°—Ç–∞—Ç—É—Å: {resume.status}\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(resume.positive_keywords or [])}\n"
        )

        if resume.negative_keywords:
            response_parts.append(f"–ò—Å–∫–ª—é—á–µ–Ω–∏—è: {', '.join(resume.negative_keywords)}\n")

        response_parts.append("‚îÄ" * 30 + "\n")

    await message.answer("\n".join(response_parts))